<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="scheduleHistory">

    <!-- 스케줄 실행 이력 등록 -->
    <insert id="insertScheduleHistory" parameterType="ScheduleHistoryVO">
		<selectKey keyProperty="historyId" resultType="Long" order="AFTER">
	    	SELECT currval(pg_get_serial_sequence('tb_schedule_history', 'history_id'))
		</selectKey>
        INSERT INTO tb_schedule_history (
            config_id,
            api_name,
            execute_time,
            status,
            message,
            processed_count,
            error_count,
            execute_start_time,
            execute_end_time,
            execute_duration
        ) VALUES (
            #{configId},
            #{apiName},
            NOW(),
            #{status},
            #{message},
            #{processedCount},
            #{errorCount},
            #{executeStartTime}::timestamp,
            #{executeEndTime}::timestamp,
            #{executeDuration}
        )
    </insert>
	<!-- 스케줄러 API 명 수정 ApiConfig_SQL.updateApiConfig 수정 시-->	
	<select id="selectConfigId" resultType="integer">
		SELECT COUNT(*)
		  FROM tb_schedule_history
		  WHERE config_id = #{configId}
	</select>
	<update id="updateApiName" parameterType="ScheduleHistoryVO">		        	
    	UPDATE 
    		tb_schedule_history
    	SET
        	api_name = #{apiName}
    	WHERE
        	config_id = #{configId}
	</update>
  	<!-- 스케줄 실행 이력 목록 조회 -->
	<select id="scheduleHistoryList" parameterType="ScheduleHistoryVO" resultType="ScheduleHistoryVO">
		SELECT
			B.history_id AS historyId,
			B.config_id AS configId,
			B.api_name AS apiName,
			B.execute_time AS executeTime,
			B.status,
			B.message,
			B.processed_count AS processedCount,
			B.error_count AS errorCount,
			B.execute_start_time AS executeStartTime,
			B.execute_end_time AS executeEndTime,
			B.execute_duration AS executeDuration,
			B.total_count AS totalCount
		FROM (
			SELECT
			row_number() OVER (ORDER BY execute_time DESC) AS RN,
			COUNT(*) OVER () AS total_count,
			history_id,
			config_id,
			api_name,
			execute_time,
			status,
			message,
			processed_count,
			error_count,
			execute_start_time,
			execute_end_time,
			execute_duration
		FROM
			tb_schedule_history
		WHERE
			1=1
		<choose>
			<when test="searchType == 'configId'">
				AND config_id ILIKE '%' || #{searchKeyword}  || '%'
			</when>
			<when test="searchType == 'apiName'">
				AND api_name ILIKE '%' || #{searchKeyword}  || '%'
			</when>
			<otherwise>
		        AND (
		        	config_id ILIKE '%' || #{searchKeyword}  || '%'
		            OR 
		            api_name ILIKE '%' || #{searchKeyword}  || '%'
		       )
			</otherwise>
			</choose>
			<choose>
				<when test="status == 'FAIL'">
				AND status = #{status}
			</when>
			</choose>
		) AS B
		WHERE
			RN BETWEEN #{firstIndex} AND #{lastIndex}
		ORDER BY
			execute_end_time DESC;
	</select>

    <!-- 스케줄 실행 이력 완료 업데이트 -->
    <update id="updateScheduleHistoryComplete" parameterType="ScheduleHistoryVO">
        UPDATE tb_schedule_history
        SET 
            status = #{status},
            message = #{message},
            processed_count = #{processedCount},
            error_count = #{errorCount},
            execute_end_time = #{executeEndTime},
            execute_duration = #{executeDuration}
        WHERE history_id = #{historyId}
    </update>
    
    <!--이력 불러오기 불러오기  -->
 	<select id="selectHistory" parameterType="String" resultType="ScheduleHistoryVO">
	    SELECT
	        config_id,
	        api_name,
	        execute_time,
	        status,
	        message,
	        execute_start_time,
	        execute_end_time,
	        ROUND(execute_duration / 1000.0, 2) AS execute_duration, 
	        processed_count,
	        error_count,        
	        CASE 
	            WHEN execute_duration > 0 AND processed_count > 0 
	            THEN ROUND((processed_count::decimal / execute_duration * 1000), 2)
	            ELSE 0 
	        END AS processing_speed
	    FROM
	        tb_schedule_history
	    WHERE
	        history_id = #{historyId}::bigint
 	</select>
 	
	<!-- 연계이력 실행상태 통계 -->
	<select id="historyStatistics" parameterType="ScheduleHistoryVO" resultType="ScheduleHistoryVO">
		select
		    B.success_rate AS successRate,
		    B.processed_count AS processedCount,
		    B.execute_duration AS executeDurationInSeconds,
		    B.error_count AS errorCount
		from (
			select 
				ROUND(
			        100.0 * sum(case when status = 'SUCCESS' then 1 else 0 end) / count(*), 
			        2
			    ) as success_rate,
			    MAX(processed_count) as processed_count,
			    ROUND(
			    	AVG(CASE WHEN status = 'SUCCESS' THEN execute_duration ELSE NULL END) / 1000.0, 
			    2) as execute_duration,
			    COUNT(*) as error_count
		    from 
		    	tb_schedule_history
		    where
		    	1=1
		    and
		    	config_id = #{configId}
			) as B;
	</select>
</mapper>