<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="apiConfig">

    <!-- API 설정 목록 조회 -->
    <select id="selectApiConfigList" parameterType="ApiConfigVO" resultType="ApiConfigVO">
	    SELECT 
	        B.config_id AS configId,
	        B.api_name AS apiName,
	        B.base_url AS baseUrl,
	        B.service_key AS serviceKey,
	        B.parameter_config AS parameterConfig,
	        B.response_format AS responseFormat,
	        B.target_table AS targetTable,
	        B.mapping_config AS mappingConfig,
	        B.use_yn AS useYn,
	        B.regist_date AS registDate,
	        B.update_date AS updateDate,
	        B.schedule_yn AS scheduleYn,
	        B.schedule_type AS scheduleType,
	        B.cron_expression AS cronExpression,
	        B.interval_minutes AS intervalMinutes,
	        B.schedule_desc AS scheduleDesc,
	        B.next_execute_time AS nextExecuteTime,
	        B.last_execute_time AS lastExecuteTime,
	        B.last_execute_status AS lastExecuteStatus,
	        B.last_execute_msg AS lastExecuteMsg,
	        B.schedule_status as scheduleStatus,
	        B.is_running AS isRunning,
	        B.total_count AS totalCount
	    FROM (
	        SELECT 
	            ROW_NUMBER() OVER (ORDER BY regist_date DESC) AS RN,
	            COUNT(*) OVER() AS total_count,
	            config_id,
	            api_name,
	            base_url,
	            service_key,
	            parameter_config,
	            response_format,
	            target_table,
	            mapping_config,
	            use_yn,
	            regist_date,
	            update_date,
	            schedule_yn,
	            schedule_type,
	            cron_expression,
	            interval_minutes,
	            schedule_desc,
	            next_execute_time,
	            last_execute_time,
	            last_execute_status,
	            last_execute_msg,
	            schedule_status,
	            CASE WHEN schedule_status = 'RUNNING' THEN 'Y' ELSE 'N' END AS is_running
	        FROM 
	            tb_api_config
	        WHERE 
	            1=1
	       <choose>
	            <when test="searchType == 'apiName'">
	            AND api_name ILIKE '%' || #{searchKeyword} || '%'
	        	</when>
	            <when test="searchType == 'baseUrl'">
	                AND base_url ILIKE '%' || #{searchKeyword} || '%'
	            </when>
	            <otherwise>
	                AND (
	                    api_name ILIKE '%' || #{searchKeyword} || '%'
	                    OR 
	                    base_url ILIKE '%' || #{searchKeyword} || '%'
	                )
	            </otherwise>
	        </choose>
	        <choose>
		        <when test="useYn != null and useYn != ''">
		            AND use_yn = #{useYn}
		        </when>
	        </choose>
	    ) AS B
	    WHERE 
	        RN BETWEEN #{firstIndex} AND #{lastIndex}
	    ORDER BY 
	        regist_date DESC
    </select>


    <!-- 활성화된 API 설정 목록 조회 -->
    <select id="selectActiveApiConfigList" resultType="ApiConfigVO">
        SELECT 
            config_id as configId,
            api_name as apiName,
            base_url as baseUrl,
            service_key as serviceKey,
            response_format as responseFormat,
            target_table as targetTable,
            mapping_config as mappingConfig,
            use_yn as useYn
        FROM tb_api_config
        WHERE use_yn = 'Y'
        ORDER BY api_name
    </select>

    <!-- 스케줄 시작시 API 설정 상세 정보 -->
    <select id="selectApiConfig" parameterType="ApiConfigVO" resultType="ApiConfigVO">
        SELECT 
            config_id as configId,
            api_name as apiName,
            base_url as baseUrl,
            service_key as serviceKey,
            response_format as responseFormat,
            target_table as targetTable,
            mapping_config as mappingConfig,
            parameter_config as parameterConfig,
            use_yn as useYn,
            schedule_yn as scheduleYn,
            schedule_type as scheduleType,
            interval_minutes as intervalMinutes,
            cron_expression as cronExpression,
            regist_date as registDate,
            update_date as updateDate
        FROM tb_api_config
        WHERE config_id = #{configId}
    </select>

    <!-- API 설정 등록 -->
    <insert id="insertApiConfig" parameterType="ApiConfigVO">
    	    <selectKey keyProperty="configId" resultType="String" order="BEFORE">
		        SELECT CONCAT('API_', LPAD((COALESCE(MAX(CAST(SUBSTRING(config_id, 5) AS INTEGER)), 0) + 1)::TEXT, 3, '0'))
		        FROM tb_api_config
		        WHERE config_id LIKE 'API_%'
		    </selectKey>
		    INSERT INTO tb_api_config (
		        config_id,
		        api_name,
		        base_url,
		        service_key,
		        parameter_config,
		        response_format,
		        target_table,
		        mapping_config,
		        use_yn,
		        schedule_yn,
		        schedule_type,
		        cron_expression,
		        interval_minutes,
		        schedule_desc,
		        next_execute_time,
		        regist_date
		    ) VALUES (
		        #{configId},
		        #{apiName},
		        #{baseUrl},
		        #{serviceKey},
		        #{parameterConfig},
		        #{responseFormat},
		        #{targetTable},
		        #{mappingConfig},
		        #{useYn},
		        COALESCE(#{scheduleYn}, 'N'),
		        #{scheduleType},
		        #{cronExpression},
		        #{intervalMinutes},
		        #{scheduleDesc},
		        #{nextExecuteTime},
		        NOW()
		    )    
    </insert>

    <!-- API 설정 수정 -->
    <update id="updateApiConfig" parameterType="ApiConfigVO">
        UPDATE
        	tb_api_config
        SET 
            api_name = #{apiName},
            base_url = #{baseUrl},
            service_key = #{serviceKey},
            parameter_config =#{parameterConfig},
            response_format = #{responseFormat},
            target_table = #{targetTable},
            mapping_config = #{mappingConfig},
            use_yn = #{useYn},
            update_date = NOW(),
            schedule_yn = #{scheduleYn},           
        	schedule_type = #{scheduleType},     
        	schedule_desc = #{scheduleDesc},     
        	cron_expression = #{cronExpression}, 
        	interval_minutes = #{intervalMinutes}
        WHERE 
        	config_id = #{configId}
    </update>
    

    <!-- API 설정 삭제 -->
    <delete id="deleteApiConfig" parameterType="ApiConfigVO">
        DELETE FROM tb_api_config
        WHERE config_id = #{configId}
    </delete>
    
        <!-- 스케줄 활성화된 API 설정 목록 조회 -->
    <select id="selectScheduleActiveApiConfigList" resultType="ApiConfigVO">
        SELECT 
            config_id as configId,
            api_name as apiName,
            base_url as baseUrl,
            service_key as serviceKey,
            response_format as responseFormat,
            target_table as targetTable,
            mapping_config as mappingConfig,
            parameter_config AS parameterConfig,
            use_yn as useYn,
            schedule_yn as scheduleYn,
            schedule_type as scheduleType,
            cron_expression as cronExpression,
            interval_minutes as intervalMinutes,
            schedule_desc as scheduleDesc
        FROM tb_api_config
        WHERE use_yn = 'Y' 
        AND schedule_yn = 'Y'
        ORDER BY api_name
    </select>

    <!-- 마지막 실행 정보 업데이트 -->
    <update id="updateLastExecuteInfo" parameterType="ApiConfigVO">
	    UPDATE tb_api_config
	    SET 
	        last_execute_time = #{lastExecuteTime}::timestamp,
	        last_execute_status = #{lastExecuteStatus},
	        last_execute_msg = #{lastExecuteMsg}
	        <if test="nextExecuteTime != null and nextExecuteTime != ''">
	        , next_execute_time = #{nextExecuteTime}::timestamp
	        </if>
	    WHERE config_id = #{configId}
    </update>

    <!-- 다음 실행 시간 업데이트 -->
    <update id="updateNextExecuteTime" parameterType="ApiConfigVO">
        UPDATE tb_api_config
        SET next_execute_time = #{nextExecuteTime}::timestamp
        WHERE config_id = #{configId}
    </update>
    
    <!-- 스케줄 상태 업데이트 -->
	<update id="updateScheduleStatus" parameterType="ApiConfigVO">
	    UPDATE tb_api_config
	    SET schedule_status = #{scheduleStatus}
	    WHERE config_id = #{configId}
	</update>
	
	<!-- 모든 스케줄 상태 업데이트 -->
	<update id="updateAllScheduleStatus" parameterType="map">
	    UPDATE 
	    	tb_api_config
	    SET 
	    	schedule_status = #{scheduleStatus},
	    	next_execute_time = null
	    WHERE schedule_yn = 'Y'
	</update>
	
	    <!-- API 설정 상세 조회 -->
    <select id="selectApiForm" parameterType="ApiConfigVO" resultType="ApiConfigVO">
        SELECT
        	config_id, 
	        api_name,
	        base_url,
	        service_key,
	        response_format,
	        target_table,
        	mapping_config::text as mapping_config,
        	parameter_config::text as parameter_config,  
	        use_yn,
	        schedule_yn,         
	        schedule_type,       
	        schedule_desc,       
	        cron_expression,     
	        interval_minutes    
        FROM 
        	tb_api_config
        WHERE 
        	config_id = #{configId}
    </select>
    

</mapper>
